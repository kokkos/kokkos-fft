name: CMake

on:
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:

  build_nvidia:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    env:
      backends: OPENMP CUDA
      CUDA_ARCHITECTURES: AMPERE80
      CMAKE_CXX_COMPILER: /work/tpls/kokkos/bin/nvcc_wrapper
      container: nvidia_env

    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.2.0
      with: { tool-cache: true, large-packages: false }

    - name: Checkout built branch
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Update submodules
      run: git submodule update --remote --recursive

    - name: Build docker
      run: docker build -t ${{ env.container }} docker/nvidia

    - name: Configure CMake for OpenMP backend
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
          docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake -B build_OPENMP \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=g++ \
            -DCMAKE_CXX_STANDARD=17 -DKokkos_ENABLE_OPENMP=ON -DBUILD_TESTING=ON

    - name: Configure CMake for CUDA backend
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
          docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake -B build_CUDA \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=${{env.CMAKE_CXX_COMPILER}} \
            -DCMAKE_CXX_STANDARD=17 -DKokkos_ENABLE_CUDA=ON -DKokkos_ARCH_${{env.CUDA_ARCHITECTURES}}=ON -DBUILD_TESTING=ON

    - name: Build
      # Build your program with the given configuration
      run: |
        for backend in ${{ env.backends }}; do
          docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake --build build_${backend} --config ${{env.BUILD_TYPE}} -j 2
        done

    - name: Test on CPUs
      # Execute tests defined by the CMake configuration. Testing on CPUs only
      run: |
        docker run -v ${{github.workspace}}:/work ${{ env.container }} ctest --output-on-failure --test-dir build_OPENMP -C ${{env.BUILD_TYPE}}

  build_amd:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    env:
      backend: HIP
      architecture: VEGA90A
      CMAKE_CXX_COMPILER: hipcc
      container: amd_env

    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.2.0
      with: { tool-cache: true, large-packages: false }

    - name: Checkout built branch
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Update submodules
      run: git submodule update --remote --recursive

    - name: Build docker
      run: docker build -t ${{ env.container }} docker/amd

    - name: Configure CMake for HIP backend
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake -B build_${{env.backend}} \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=${{env.CMAKE_CXX_COMPILER}} \
            -DCMAKE_CXX_STANDARD=17 -DKokkos_ENABLE_HIP=ON -DKokkos_ARCH_${{env.architecture}}=ON -DBUILD_TESTING=ON

    - name: Build
      # Build your program with the given configuration
      run: |
        docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake --build build_${{env.backend}} --config ${{env.BUILD_TYPE}} -j 2